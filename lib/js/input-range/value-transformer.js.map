{"version":3,"sources":["../../../src/js/input-range/value-transformer.js"],"names":["getPercentageFromPosition","getValueFromPosition","getValueFromProps","getPercentageFromValue","getPercentagesFromValues","getPositionFromValue","getPositionsFromValues","getPositionFromEvent","getStepValueFromValue","position","clientRect","length","width","sizePerc","x","minValue","maxValue","valueDiff","props","isMultiValue","value","min","max","validValue","valuePerc","values","positionValue","y","event","touches","clientX","left","valuePerStep","Math","round"],"mappings":"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","file":"value-transformer.js","sourcesContent":["import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n"]}