{"version":3,"sources":["../../../src/js/input-range/input-range.jsx"],"names":["valueTransformer","InputRange","allowSameValues","bool","ariaLabelledby","string","ariaControls","classNames","objectOf","disabled","draggableTrack","formatLabel","func","maxValue","minValue","name","onChangeStart","onChange","isRequired","onChangeComplete","step","number","value","renderSubLabels","props","startValue","node","trackNode","isSliderDragging","lastKeyMoved","removeDocumentMouseUpListener","removeDocumentTouchEndListener","inputRange","disabledInputRange","getClientRect","position","values","getValueFromProps","isMultiValue","positions","getPositionsFromValues","getTrackClientRect","distanceToMin","min","distanceToMax","max","val","perc","style","left","currentValues","isWithinRange","hasStepDifference","key","updatePositions","getValueFromPosition","transformedValues","getStepValueFromValue","updateValues","shouldUpdate","updateValue","ownerDocument","addEventListener","handleMouseUp","handleTouchEnd","removeEventListener","event","getPositionFromEvent","requestAnimationFrame","updatePosition","prevEvent","stepValue","prevPosition","prevValue","prevStepValue","offset","keyCode","preventDefault","decrementValue","incrementValue","getKeyByPosition","handleInteractionStart","handleInteractionEnd","addDocumentMouseUpListener","addDocumentTouchEndListener","percentages","getPercentagesFromValues","keys","getKeys","reverse","map","percentage","slider","handleSliderDrag","handleSliderKeyDown","componentClassName","getComponentClassName","fstLabelVal","sndLabelVal","thdLabelVal","fstLabelStyle","sndLabelStyle","thdLabelStyle","Math","round","getStyle","inactiveSeqValues","inactiveSeq","i","push","inactiveCircleLabel","handleKeyDown","handleKeyUp","handleMouseDown","handleTouchStart","sublabel","handleTrackDrag","handleTrackMouseDown","renderSliders","renderHiddenInputs","Component"],"mappings":"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","file":"input-range.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length, isNumber } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      allowSameValues: PropTypes.bool,\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n      renderSubLabels: PropTypes.bool,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      allowSameValues: false,\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n      renderSubLabels: false,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {boolean} [props.allowSameValues]\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   * @param {boolean} props.renderSubLabels\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.lastKeyMoved = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * @private\n   * @return {Object}\n   */\n  getStyle(val) {\n    const { maxValue, minValue } = this.props;\n    const perc = ((val - minValue) / (maxValue - minValue)) * 100;\n    const style = {\n      position: 'absolute',\n      left: `${perc}%`,\n    };\n\n    return style;\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             this.props.allowSameValues\n              ? values.min <= values.max\n              : values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n    this.lastKeyMoved = key;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n    case RIGHT_ARROW:\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n    const keys = this.props.allowSameValues &&\n      this.lastKeyMoved === 'min'\n      ? this.getKeys().reverse()\n      : this.getKeys();\n\n    return keys.map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    let fstLabelVal = 0;\n    let sndLabelVal = 0;\n    let thdLabelVal = 0;\n    let fstLabelStyle = {};\n    let sndLabelStyle = {};\n    let thdLabelStyle = {};\n\n    if (this.props.renderSubLabels) {\n      fstLabelVal = ((Math.round((this.props.maxValue - this.props.minValue) / 4)) * 1) + this.props.minValue;\n      sndLabelVal = ((Math.round((this.props.maxValue - this.props.minValue) / 4)) * 2) + this.props.minValue;\n      thdLabelVal = ((Math.round((this.props.maxValue - this.props.minValue) / 4)) * 3) + this.props.minValue;\n\n      fstLabelStyle = this.getStyle(fstLabelVal);\n      sndLabelStyle = this.getStyle(sndLabelVal);\n      thdLabelStyle = this.getStyle(thdLabelVal);\n    }\n\n    const inactiveSeqValues = [];\n    let inactiveSeq = null;\n    if (isNumber(this.props.value)) {\n      for (let i = this.props.value; i < this.props.maxValue; i++) {\n        inactiveSeqValues.push(i);\n      }\n      inactiveSeq = inactiveSeqValues.map((value) => {\n        const style = this.getStyle(value);\n        return <div key={value} style={style} className={this.props.classNames.inactiveCircleLabel} />;\n      });\n    }\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        {this.props.renderSubLabels &&\n        <div>\n          <span style={fstLabelStyle} className={this.props.classNames.sublabel}>\n            <Label\n              classNames={this.props.classNames}\n              formatLabel={this.props.formatLabel}\n              type=\"fst\">\n              {fstLabelVal}\n            </Label>\n          </span>\n\n          <span style={sndLabelStyle} className={this.props.classNames.sublabel}>\n            <Label\n              classNames={this.props.classNames}\n              formatLabel={this.props.formatLabel}\n              style={sndLabelStyle}\n              type=\"snd\">\n              {sndLabelVal}\n            </Label>\n          </span>\n\n          <span style={thdLabelStyle} className={this.props.classNames.sublabel}>\n            <Label\n              classNames={this.props.classNames}\n              formatLabel={this.props.formatLabel}\n              style={thdLabelStyle}\n              type=\"thd\">\n              {thdLabelVal}\n            </Label>\n          </span>\n        </div>\n        }\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        {isNumber(this.props.value) &&\n          <div className=\"InactiveCircleLabels\">\n            {inactiveSeq}\n          </div>\n        }\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]}